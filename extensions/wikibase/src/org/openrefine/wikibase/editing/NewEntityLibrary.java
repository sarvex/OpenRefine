/*******************************************************************************
 * MIT License
 * 
 * Copyright (c) 2018 Antonin Delpeuch
 * 
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 * 
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 * 
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 ******************************************************************************/

package org.openrefine.wikibase.editing;

import java.util.HashMap;
import java.util.Map;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonProperty;

/**
 * This keeps track of the new entities that we have created for each internal reconciliation id.
 * 
 * @author Antonin Delpeuch
 *
 */
public class NewEntityLibrary {

    private Map<Long, String> map;

    public NewEntityLibrary() {
        map = new HashMap<>();
    }

    @JsonCreator
    public NewEntityLibrary(@JsonProperty("qidMap") Map<Long, String> map) {
        this.map = map;
    }

    /**
     * Retrieves the id allocated to a given new cell
     * 
     * @param id:
     *            the fake EntityId generated by the cell
     * @return the id (or null if unallocated yet)
     */
    public String getId(long id) {
        return map.get(id);
    }

    /**
     * Stores an id associated to a new cell
     * 
     * @param id
     *            : the internal reconciliation id of the new cell
     * @param returnedId
     *            : the associated id returned by Wikibase
     */
    public void setId(long id, String returnedId) {
        map.put(id, returnedId);
    }

    /**
     * Getter, only meant to be used by Jackson
     * 
     * @return the underlying map
     */
    @JsonProperty("qidMap")
    public Map<Long, String> getIdMap() {
        return map;
    }

    @Override
    public boolean equals(Object other) {
        if (other == null || !NewEntityLibrary.class.isInstance(other)) {
            return false;
        }
        NewEntityLibrary otherLibrary = (NewEntityLibrary) other;
        return map.equals(otherLibrary.getIdMap());
    }

    @Override
    public int hashCode() {
        return map.hashCode();
    }

    @Override
    public String toString() {
        return map.toString();
    }
}
